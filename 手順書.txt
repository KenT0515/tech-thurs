「画像が投稿できる掲示板」の手順書

1からの構築の仕方が下に書きまとめてあります

EC2インスタンスを作成

PowerShell を立ち上げる

作ったEC2インスタンスに接続する

vimのインストール
sudo yum install vim -y

screenのインストール
sudo yum install screen -y
または
sudo apt install screen -y

●Docker

Dockerのインストール
sudo yum install -y docker
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -a -G docker ec2-user

dockerfileの編集
-----------------------------------------dockerfileの内容------------------------------------------
FROM php:8.1-fpm-alpine AS php

RUN docker-php-ext-install pdo_mysql

RUN install -o www-data -g www-data -d /var/www/upload/image/

RUN echo -e "post_max_size = 5M\nupload_max_filesize = 5M" >> ${PHP_INI_DIR}/php.ini
---------------------------------------------------------------------------------------------------
Docker Compose のインストール
sudo mkdir -p /usr/local/lib/docker/cli-plugins/
sudo curl -SL https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

Dockercompose の設定ファイルの編集

dockertestの作成        mkdir dockertest
dockertestに移動してcompose.ymlの作成
cd dockertest
vim compose.yml
-------------------------------compose.ymlの内容-----------------------------
services:
  web:
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./public/:/var/www/public/
      - image:/var/www/upload/image/
    depends_on:
      - php
  php:
    container_name: php
    build:
      context: .
      target: php
    volumes:
      - ./public/:/var/www/public/
      - image:/var/www/upload/image/
  mysql:
    container_name: mysql
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: techc
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      TZ: Asia/Tokyo
    volumes:
      - mysql:/var/lib/mysql
    command: >
      mysqld
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_allowed_packet=4MB
volumes:
  image:
    driver: local
  mysql:
--------------------------------------------------------------------------

●nginx
nginxの設定ファイルの作成と編集
dockertestの中に nginx/conf.d/default.conf を作成
mkdir nginx
mkdir nginx/conf.d
vim nginx/conf.d/default.conf
-------------------------------default.confの内容------------------------------
server {
    listen       0.0.0.0:80;
    server_name  _;
    charset      utf-8;
    client_max_body_size 6M;
    root /var/www/public;
    location ~ \.php$ {
        fastcgi_pass  php:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include       fastcgi_params;
    }

    location /image/ {
        root /var/www/upload;
    }
}
--------------------------------------------------------------------------

●MySQL

DB techcに接続
docker compose exec mysql mysql techc

テーブル bbs_entries の作成
テーブルの作成
CREATE TABLE `bbs_entries` (
    `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `body` TEXT NOT NULL,
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP
);
画像を入れるカラムの追加
ALTER TABLE `bbs_entries` ADD COLUMN image_filename TEXT DEFAULT NULL;

データベース内のテーブルの用意は終了
--------------------------------------------------------------------------------
アプリケーションとCSSの用意

---------------------------------------------bbsimage.php-----------------------------------------------------------

<?php
$dbh = new PDO('mysql:host=mysql;dbname=techc', 'root', '');
if (isset($_POST['body'])) {
  // POSTで送られてくるフォームパラメータ body がある場合
  $image_filename = null;
  if (isset($_FILES['image']) && !empty($_FILES['image']['tmp_name'])) {
    // アップロードされた画像がある場合
    if (preg_match('/^image\//', mime_content_type($_FILES['image']['tmp_name'])) !== 1) {
      // アップロードされたものが画像ではなかった場合
      header("HTTP/1.1 302 Found");
      header("Location: ./bbsimage.php");
    }
    // 元のファイル名から拡張子を取得
    $pathinfo = pathinfo($_FILES['image']['name']);
    $extension = $pathinfo['extension'];
    // 新しいファイル名を決める。他の投稿の画像ファイルと重複しないように時間+乱数で決める。
    $image_filename = strval(time()) . bin2hex(random_bytes(25)) . '.' . $extension;
    $filepath = '/var/www/upload/image/' . $image_filename;
    move_uploaded_file($_FILES['image']['tmp_name'], $filepath);
  }
  // insertする
  $insert_sth = $dbh->prepare("INSERT INTO bbs_entries (body, image_filename) VALUES (:body, :image_filename)");
  $insert_sth->execute([
    ':body' => $_POST['body'],
    ':image_filename' => $image_filename,
  ]);
  // 処理が終わったらリダイレクトする
  // リダイレクトしないと，リロード時にまた同じ内容でPOSTすることになる
  header("HTTP/1.1 302 Found");
  header("Location: ./bbsimage.php");
  return;
}
// いままで保存してきたものを取得
$select_sth = $dbh->prepare('SELECT * FROM bbs_entries ORDER BY created_at DESC');
$select_sth->execute();
?>

<head>
  <link rel="stylesheet" href="css/style.css">
  <title>画像投稿できる掲示板</title>

</head>

<body>

  <h1>画像が投稿できる掲示板</h1>


  <h2>投稿</h2>
  <!-- フォームのPOST先はこのファイル自身にする -->
  <form method="POST" action="./bbsimage.php" enctype="multipart/form-data">
    <textarea class="textbox" name="body" placeholder="内容を入力"></textarea>
    <div>
      <!--<input type="file" accept="image/*" name="image">-->
      <input type="file" accept="image/*" name="image" id="imageInput">
    </div>
    <button class="btn" type="submit">送信</button>
  </form>
  <hr>
  <?php foreach ($select_sth as $entry): ?>
    <dl>
      <dt>ID</dt>
      <dd>
        <?= $entry['id'] ?>
      </dd>
      <dt>日時</dt>
      <dd>
        <?= $entry['created_at'] ?>
      </dd>
      <dt>内容</dt>
      <dd>
        <?= nl2br(htmlspecialchars($entry['body'])) // 必ず htmlspecialchars() すること ?>
        <?php if (!empty($entry['image_filename'])): // 画像がある場合は img 要素を使って表示 ?>
          <div>
            <img src="/image/<?= $entry['image_filename'] ?>">
          </div>
        <?php endif; ?>
      </dd>
    </dl>
  <?php endforeach ?>


</body>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const imageInput = document.getElementById("imageInput");
    imageInput.addEventListener("change", () => {
      if (imageInput.files.length < 1) {
        // 未選択の場合
        return;
      }
      if (imageInput.files[0].size > 5 * 1024 * 1024) {
        // ファイルが5MBより多い場合
        alert("5MB以下のファイルを選択してください。");
        imageInput.value = "";
      }
    });
  });
</script>
---------------------------------------------------css/style.css-------------------------------------------------------------

@charset "UTF-8";


dt{
    font-size:125%;
}
dl{
    font-size:125%;
}
div{
     margin: 1em 0;
}

dl {
     margin-bottom: 1em;
     padding-bottom: 1em;
     border-bottom: 1px solid #ccc;
 }
 img{
     max-height: 10em;
}

.btn {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 250px;
    margin:0 auto;
    padding: .9em 2em;
    border: 1px solid #000000;
    border-radius: 5px;
    background-color: #fff;
    color: #000000;
    font-size: 1em;
}

.textbox{
    width: 100%;
    height:17em;
    padding: 8px 10px;
    border: 1px solid #d2d2d2;
    border-radius: 3px;
    background: #f7f7f7;
    color: #333;
    font-size: 1em;
    line-height: 1.5;
}

.textbox::placeholder {
    font-size:40px;
    color: #999;
}
-----------------------------------------------------------------------------------------------------
上記二つを dockertest/publicに用意する


用意出来たらdocker compose up　したら

webサイト上で　　　http://EC2インスタンスのIPアドレス/bbsimage.php　　打てば繋がります



----------------------------------追記----------------------------------------------------------------------
Dockerfile
nginx/conf.d/default.conf
compose.yml
bbsimage.php
css/style.css

上に書いているものはgithubに上がっています
cloneして持ってくるのがおすすめです























